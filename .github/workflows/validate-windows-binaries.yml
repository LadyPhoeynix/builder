name: Validate binary  images

on:
  push:
#    branches:
#      main
#    paths:
#      - .github/workflows/validate-windows-binaries.yml
#  pull_request:
#    paths:
#      - .github/workflows/validate-windows-binaries.yml
jobs:
  generate-conda-matrix-macos:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: conda
      os: macos
#  generate-conda-matrix:
#    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
#    with:
#      package-type: conda
#      os: windows
#  generate-wheels-matrix:
#    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
#    with:
#      package-type: wheel
#      os: windows
  validate-windows-binaries-conda:
#    needs: generate-conda-matrix
    strategy:
      matrix:
#        ${{ fromJson(needs.generate-conda-matrix.outputs.matrix) }}
        "include": [
        {
          "python_version": "3.7",
          "gpu_arch_type": "cpu",
          "gpu_arch_version": "",
          "desired_cuda": "cpu",
          "container_image": "pytorch/conda-builder:cpu",
          "package_type": "conda",
          "build_name": "conda-py3_7-cpu",
          "validation_runner": "windows-2019"
        },
        {
          "python_version": "3.7",
          "gpu_arch_type": "cuda",
          "gpu_arch_version": "11.3",
          "desired_cuda": "cu113",
          "container_image": "pytorch/conda-builder:cuda11.3",
          "package_type": "conda",
          "build_name": "conda-py3_7-cuda11_3",
          "validation_runner": "windows-2019-m60"
        }
        ]
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python_version }}
          miniconda-version: "latest"
          auto-activate-base: false
          activate-environment: conda-env-${{ github.run_id }}
      - run: conda install --yes numpy
      - if: matrix.desired_cuda == 'cpu'
        run: conda install pytorch torchaudio torchvision cpuonly  -c pytorch
      - if: matrix.desired_cuda == 'cu102'
        run: conda install pytorch torchaudio torchvision cudatoolkit=10.2 -c pytorch
      - if: matrix.desired_cuda == 'cu113'
        run: conda install pytorch torchaudio torchvision cudatoolkit=11.3 -c pytorch
      - if: matrix.desired_cuda == 'cu116'
        run: conda install pytorch torchaudio torchvision pytorch-cuda=11.6 -c pytorch-nightly -c nvidia
      - if: matrix.desired_cuda == 'cu117'
        run: conda intall pytorch torchaudio torchvision pytorch-cuda=11.7 -c pytorch-nightly -c nvidia
      - name: Run smoke test
        run: conda run test\smoke_test\smoke_test.py

#  validate-windows-binaries-conda-gpu:
#    needs: generate-conda-matrix-cpu
#    strategy:
#      matrix:
#        ${{ fromJson(needs.generate-conda-matrix.outputs.matrix) }}
#      fail-fast: false
#    runs-on: ${{ matrix.validation_runner }}
#    env:
#      CONDA_ENV: conda-env-${{ github.run_id }}
#    steps:
#      - name: Checkout PyTorch builder
#        uses: actions/checkout@v2
#      - name: Install Fresh Miniconda
#        shell: cmd
#      - name: Install Fresh Miniconda
#        shell: cmd
#        run: |
#          set MINICONDA_INSTALL_PATH_WIN=%RUNNER_TEMP%\miniconda
#          mkdir %MINICONDA_INSTALL_PATH_WIN%
#          set MINICONDA_URL=https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
#          curl -fsSL %MINICONDA_URL% -o %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe
#          %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%MINICONDA_INSTALL_PATH_WIN%
#          del %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe
#      - name: Conda Install pytorch and smoke test
#        env:
#          GPU_ARCH_VER: ${{ matrix.gpu_arch_version }}
#          DESIRED_CUDA: ${{ matrix.desired_cuda }}
#          PYTHON_VERSION: ${{ matrix.python_version }}
#        run: |
#          conda create --yes --prefix %CONDA_ENV% python=%PYTHON_VERSION% numpy
#
#          set CONDA_RUN=conda run -p %CONDA_ENV%
#          set CONDA_INSTALL=conda install --yes -p %CONDA_ENV%
#
#          IF "%DESIRED_CUDA%"=="cpu" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cpuonly  -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu102" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cudatoolkit=10.2 -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu113" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cudatoolkit=11.3 -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu116" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision pytorch-cuda=11.6 -c pytorch-nightly -c nvidia
#          ) ELSE IF "%DESIRED_CUDA%"=="cu117" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision pytorch-cuda=11.7 -c pytorch-nightly -c nvidia
#          ) ELSE (
#            echo "No binary available"
#          )
#          %CONDA_RUN% ./test/smoke_test/smoke_test.py
#
#


#      - name: Install Fresh Miniconda
#        shell: cmd
#        run: |
#          set MINICONDA_INSTALL_PATH_WIN=%RUNNER_TEMP%\miniconda
#          mkdir %MINICONDA_INSTALL_PATH_WIN%
#          set MINICONDA_URL=https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
#          curl -fsSL %MINICONDA_URL% -o %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe
#          %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%MINICONDA_INSTALL_PATH_WIN%
#          del %MINICONDA_INSTALL_PATH_WIN%\miniconda.exe
#          echo %MINICONDA_INSTALL_PATH_WIN%\Scripts >> %GITHUB_PATH%
#          echo %MINICONDA_INSTALL_PATH_WIN%\Library\bin >> %GITHUB_PATH%
#      - name: Conda Install pytorch and smoke test
#        env:
#          GPU_ARCH_VER: ${{ matrix.gpu_arch_version }}
#          DESIRED_CUDA: ${{ matrix.desired_cuda }}
#          PYTHON_VERSION: ${{ matrix.python_version }}
#        shell: cmd
#        run: |
#          set CONDA_ENV=%RUNNER_TEMP%\conda_environment_%GITHUB_RUN_ID%
#          conda create --yes --prefix %CONDA_ENV% python=%PYTHON_VERSION% numpy
#          set CONDA_RUN=conda run -p %CONDA_ENV%
#          set CONDA_INSTALL=conda install --yes -p %CONDA_ENV%
#
#          IF "%DESIRED_CUDA%"=="cpu" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cpuonly  -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu102" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cudatoolkit=10.2 -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu113" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision cudatoolkit=11.3 -c pytorch
#          ) ELSE IF "%DESIRED_CUDA%"=="cu116" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision pytorch-cuda=11.6 -c pytorch-nightly -c nvidia
#          ) ELSE IF "%DESIRED_CUDA%"=="cu117" (
#            %CONDA_INSTALL% pytorch torchaudio torchvision pytorch-cuda=11.7 -c pytorch-nightly -c nvidia
#          ) ELSE (
#            echo "No binary available"
#          )
#          %CONDA_RUN% ./test/smoke_test/smoke_test.py

#  validate-windows-binaries-wheels:
#    needs: generate-wheels-matrix
#    strategy:
#      matrix:
#        ${{ fromJson(needs.generate-wheels-matrix.outputs.matrix) }}
#      fail-fast: false
#    runs-on: ${{ matrix.validation_runner }}
#    steps:
#      - name: Checkout PyTorch builder
#        uses: actions/checkout@v2
#      - name: Install Fresh Miniconda
#        shell: cmd
#        run: |
#          REM Install Miniconda3
#          set "CONDA_HOME=%CD%\conda"
#          set "tmp_conda=%CONDA_HOME%"
#          set "miniconda_exe=%CD%\miniconda.exe"
#          echo %miniconda_exe%
#          rmdir /s /q conda
#          del miniconda.exe
#          curl -k https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o "%miniconda_exe%"
#          start /wait "" "%miniconda_exe%" /S /InstallationType=JustMe /RegisterPython=0 /AddToPath=1 /D=%tmp_conda%
#          conda --version
##      - name: Install conda
##        uses: conda-incubator/setup-miniconda@v2
##        with:
##          python-version: ${{ matrix.python_version }}
##          auto-update-conda: true
##          miniconda-version: "latest"
##          activate-environment: testenv
#      - name: Check nvidia smi
#        if: ${{ matrix.gpu_arch_type == 'cuda' }}
#        shell: cmd
#        run: |
#          nvidia-smi
#      - name: Conda Install pytorch and smoke test
#        env:
#          ENV_NAME: conda-env-${{ github.run_id }}
#          GPU_ARCH_VER: ${{ matrix.gpu_arch_version }}
#          DESIRED_CUDA: ${{ matrix.desired_cuda }}
#        shell: cmd
#        run: |
#          conda create -yp %ENV_NAME% python=%PYTHON_VERSION% numpy
#          IF "%DESIRED_CUDA%"=="cpu" (
#            conda run -p %ENV_NAME% pip3 install torch torchvision torchaudio
#          ) ELSE IF "%DESIRED_CUDA%"=="cu102" (
#            conda run -p %ENV_NAME% pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cu102"
#          ) ELSE IF "%DESIRED_CUDA%"=="cu113" (
#            conda run -p %ENV_NAME% pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/cu113"
#          ) ELSE IF "%DESIRED_CUDA%"=="cu116" (
#            conda run -p %ENV_NAME% pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/nightly/cu116"
#          ) ELSE IF "%DESIRED_CUDA%"=="cu117" (
#            conda run -p %ENV_NAME% pip3 install torch torchvision torchaudio --extra-index-url "https://download.pytorch.org/whl/nightly/cu117"
#          ) ELSE (
#            echo "No binary available"
#          )
#          conda run -p %ENV_NAME% python3  ./test/smoke_test/smoke_test.py
#          conda env remove -p %ENV_NAME%
