name: 'validate-linux-binary'
description: 'Linux Binary Conda or Wheel Validation'
inputs:
  gpu_arch_type:
    description: 'GPU arch type'
    required: true
    default: 'cpu'
  gpu_arch_ver:
    description: 'GPU arch version'
    required: true
    default: 'cpu'
  installation:
    description: 'Installation instructions'
    required: true
    default: ''
  desired_cuda:
    description: 'Desired CUDA'
    required: true
    default: 'cpu'
  python_version:
    description: 'Python version'
    required: true
    default: '3.9'
  dev_toolset:
    description: 'Dev Toolset'
    required: true
    default: 'cxx11-abi'
  package_type:
    description: 'Package Type'
    required: true
    default: 'conda'
runs:
  using: "composite"
  steps:
    - name: Check nvidia smi
      if: ${{ inputs.gpu_arch_type == 'cuda' }}
      shell: bash
      run: |
        nvidia-smi
    - name: Instlla Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ inputs.python_version }}
        auto-update-conda: true
        miniconda-version: "latest"
        activate-environment: testenv
    - name: Install PyTorch and run tests
      shell: bash
      env:
        GPU_ARCH_VER: ${{ inputs.gpu_arch_ver }}
        GPU_ARCH_TYPE: ${{ inputs.gpu_arch_type }}
        INSTALLATION: ${{ inputs.installation }}
        ENV_NAME: conda-env-${{ github.run_id }}
        DESIRED_PYTHON: ${{ inputs.python_version }}
        DESIRED_CUDA: ${{ inputs.desired_cuda }}
        DESIRED_DEVTOOLSET: ${{ inputs.dev_toolset }}
        PACKAGE_TYPE: ${{ inputs.package_type }}
      run: |
        set -ex
        conda create -yp ${ENV_NAME} python=${{ inputs.python_version }} numpy
        conda run -p ${ENV_NAME} $INSTALLATION
        export LD_LIBRARY_PATH="$(dirname $(which python))/lib"
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib
        conda run -p ${ENV_NAME} env LD_LIBRARY_PATH=$LD_LIBRARY_PATH bash ./check_binary.sh
